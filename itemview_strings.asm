

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: B3-432E-F558-21			    |
; |				Ilfak Guilfanov				    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	37FA7EB20169DB2E73F1B91D902E062A
; Input	CRC32 :	9C39D989

; File Name   :	D:\Games\mom_work\get_strings
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 053Ch Loaded length: 053Ch

.686p
.mmx
.model flat


; Segment type:	Pure code
seg000 segment byte public 'CODE' use16
assume cs:seg000
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

get_item_power_strings proc far

var_20=	byte ptr -20h
var_2= word ptr	-2
arg_0= word ptr	 6
arg_4= word ptr	 0Ah
arg_6= word ptr	 0Ch

push	bp
mov	bp, sp
sub	sp, 20h
push	si
push	di
mov	di, [bp+arg_4]
mov	bx, [bp+arg_6]
mov	word ptr [bx], 0
xor	si, si
mov	[bp+var_2], 0
jmp	short loc_37

loc_1B:
mov	ax, 4070h
push	ax
mov	ax, [bp+var_2]
mov	dx, 14h
imul	dx
mov	dx, [bp+arg_4]
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
inc	[bp+var_2]

loc_37:
cmp	[bp+var_2], 8
jl	short loc_1B
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
cmp	byte ptr es:[bx+24h], 0
jle	short loc_BC
mov	ax, 45DBh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
mov	ax, 0Ah
push	ax
lea	ax, [bp+var_20]
push	ax
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+24h]
cbw
push	ax
call	far ptr	0:32D0h
add	sp, 6
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
mov	ax, 49A4h
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
inc	si

loc_BC:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
cmp	byte ptr es:[bx+25h], 0
jle	short loc_140
cmp	si, 8
jge	short loc_140
mov	ax, 45DBh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
mov	ax, 0Ah
push	ax
lea	ax, [bp+var_20]
push	ax
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+25h]
cbw
push	ax
call	far ptr	0:32D0h
add	sp, 6
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
mov	ax, 45FDh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
inc	si

loc_140:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
cmp	byte ptr es:[bx+26h], 0
jle	short loc_1C4
cmp	si, 8
jge	short loc_1C4
mov	ax, 45DBh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
mov	ax, 0Ah
push	ax
lea	ax, [bp+var_20]
push	ax
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+26h]
cbw
push	ax
call	far ptr	0:32D0h
add	sp, 6
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
mov	ax, 49ACh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
inc	si

loc_1C4:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
cmp	byte ptr es:[bx+27h], 0
jle	short loc_24D
cmp	si, 8
jge	short loc_24D
mov	ax, 45DBh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
mov	ax, 0Ah
push	ax
lea	ax, [bp+var_20]
push	ax
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+27h]
cbw
cwd
sub	ax, dx
sar	ax, 1
push	ax
call	far ptr	0:32D0h
add	sp, 6
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
mov	ax, 49B5h
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
inc	si

loc_24D:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
cmp	byte ptr es:[bx+28h], 0
jle	short loc_2D1
cmp	si, 8
jge	short loc_2D1
mov	ax, 45DBh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
mov	ax, 0Ah
push	ax
lea	ax, [bp+var_20]
push	ax
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+28h]
cbw
push	ax
call	far ptr	0:32D0h
add	sp, 6
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
mov	ax, 49BFh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
inc	si

loc_2D1:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
cmp	byte ptr es:[bx+29h], 0
jle	short loc_355
cmp	si, 8
jge	short loc_355
mov	ax, 45DBh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
mov	ax, 0Ah
push	ax
lea	ax, [bp+var_20]
push	ax
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+29h]
cbw
push	ax
call	far ptr	0:32D0h
add	sp, 6
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
mov	ax, 49CBh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
inc	si

loc_355:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
cmp	byte ptr es:[bx+2Ah], 0
jle	short loc_3D9
cmp	si, 8
jge	short loc_3D9
mov	ax, 49D8h
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
mov	ax, 0Ah
push	ax
lea	ax, [bp+var_20]
push	ax
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+2Ah]
cbw
push	ax
call	far ptr	0:32D0h
add	sp, 6
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
mov	ax, 49DAh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
inc	si

loc_3D9:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
cmp	byte ptr es:[bx+2Bh], 0
ja	short loc_3F1
jmp	loc_4AD

loc_3F1:
cmp	si, 8
jl	short loc_3F9
jmp	loc_4AD

loc_3F9:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+2Bh]
mov	ah, 0
mov	dx, 24h	; '$'
imul	dx
mov	dx, ds:912Ch
add	dx, ax
push	word ptr ds:912Eh
push	dx
xor	ax, ax
push	ax
lea	ax, [bp+var_20]
push	ax
call	far ptr	48h:0E1h
add	sp, 8
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
pop	cx
pop	cx
mov	ax, 45FAh
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
mov	ax, 0Ah
push	ax
lea	ax, [bp+var_20]
push	ax
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	al, es:[bx+2Ch]
cbw
push	ax
call	far ptr	0:32D0h
add	sp, 6
mov	ax, 45B1h
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
lea	ax, [bp+var_20]
push	ax
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3BFEh
pop	cx
pop	cx
inc	si

loc_4AD:
mov	[bp+var_2], 0
jmp	short loc_51E

loc_4B4:
mov	ax, [bp+arg_0]
mov	dx, 32h	; '2'
imul	dx
les	bx, ds:9136h
add	bx, ax
mov	ax, es:[bx+30h]
mov	dx, es:[bx+2Eh]
mov	bx, [bp+var_2]
mov	cl, 3
shl	bx, cl
and	dx, [bx+3F68h]
and	ax, [bx+3F6Ah]
or	dx, ax
jz	short loc_51B
mov	bx, [bp+var_2]
mov	cl, 3
shl	bx, cl
push	word ptr [bx+3F64h]
mov	ax, si
mov	dx, 14h
imul	dx
mov	dx, di
add	dx, ax
push	dx
call	far ptr	0:3C37h
jmp	short loc_518	; jump over part that produces the description strings
mov	bx, [bp+var_2]
mov	cl, 3
shl	bx, cl
push	word ptr [bx+3F66h]
mov	ax, si
mov	dx, 28h	; '('
imul	dx
mov	dx, [bp+arg_4]
add	dx, ax
push	dx
call	far ptr	0:3C37h

loc_518:
pop	cx
pop	cx
inc	si

loc_51B:
inc	[bp+var_2]

loc_51E:
cmp	[bp+var_2], 20h	; ' '
jge	short loc_529
cmp	si, 8
jl	short loc_4B4

loc_529:
cmp	si, 8
jle	short loc_531
mov	si, 8

loc_531:
mov	bx, [bp+arg_6]
mov	[bx], si
pop	di
pop	si
mov	sp, bp
pop	bp
retf
get_item_power_strings endp

seg000 ends


end
