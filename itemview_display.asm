

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2011 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: B3-432E-F558-21			    |
; |				Ilfak Guilfanov				    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	C64A9E190119B997D72FF654714C79B5
; Input	CRC32 :	3D9BE538

; File Name   :	D:\Games\mom_work\dump_code_3
; Format      :	Binary file
; Base Address:	0000h Range: 0000h - 01C9h Loaded length: 01C9h

.486p
.model flat


; Segment type:	Pure code
seg000 segment byte public 'CODE' use16
assume cs:seg000
assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing


; Attributes: bp-based frame

view_item_window proc far

ptr_power_names_200_byte= byte ptr -138h
ptr_power_descriptions_unused= byte ptr	-70h
y_offset_final=	word ptr -17h
row_number= word ptr -15h
bool_is_2nd_column= byte ptr -13h
x_offset_strings= word ptr -11h
x_offset_dots= word ptr	-0Fh
var_C= byte ptr	-0Ch
var_B= byte ptr	-0Bh
y_offset_border= word ptr -8
line_height= word ptr -6
nr_item_powers=	word ptr -4
item_nr= word ptr  6
unk_adress_?= word ptr	8
unk_ptr= word ptr  0Ah

push	bp
mov	bp, sp

loc_3:
sub	sp, 138h
push	si
push	di

loc_9:
mov	di, [bp+unk_adress_?]
push	di
push	word ptr ds:976Ch
call	far ptr	0F0h:0A9Bh
pop	cx
pop	cx
push	[bp+unk_ptr]
push	[bp+item_nr]
nop
push	cs
call	near ptr 2D8h
pop	cx
pop	cx
push	[bp+unk_ptr]
push	di
mov	ax, 6
push	ax
mov	ax, 9
push	ax
call	far ptr	0F0h:2318h
add	sp, 8
xor	ax, ax
push	ax
xor	ax, ax
push	ax
mov	ax, 4
push	ax
mov	ax, 4
push	ax
call	far ptr	88h:0Eh	; load palette / font
add	sp, 8
mov	ax, 2Eh	; '.'
push	ax
call	far ptr	88h:1C1h
pop	cx
mov	ax, 1
push	ax
call	far ptr	88h:122h
pop	cx
mov	ax, 2Fh	; '/'
push	ax
call	far ptr	88h:0EFh
pop	cx
push	di
mov	ax, [bp+item_nr]
mov	dx, 32h	; '2'
imul	dx
mov	dx, ds:9136h
add	dx, ax
push	word ptr ds:9138h
push	dx
mov	ax, 0Ch
push	ax
mov	ax, 1Fh
push	ax
call	far ptr	88h:1824h ; write item name
add	sp, 0Ah
lea	ax, [bp+nr_item_powers]
push	ax
lea	ax, [bp+ptr_power_names_200_byte]
push	ax
lea	ax, [bp+ptr_power_descriptions_unused]
push	ax
push	[bp+item_nr]

loc_A1:			; load power strings
call	far ptr	270h:2Ah
add	sp, 8
push	[bp+unk_ptr]
push	word ptr ds:976Ah
call	far ptr	0F0h:0A9Bh ; unk_gfx
pop	cx
pop	cx
mov	[bp+var_C], 2Eh	; '.'
mov	[bp+var_B], 0B1h ; '±'
cmp	[bp+nr_item_powers], 5
jl	short loc_F6
lea	ax, [bp+var_C]
push	ax
mov	ax, 1
push	ax
call	far ptr	88h:17Dh
pop	cx
pop	cx
xor	ax, ax
push	ax
xor	ax, ax
push	ax
mov	ax, 0Fh
push	ax
mov	ax, 1
push	ax
call	far ptr	88h:0Eh
add	sp, 8
mov	[bp+line_height], 8
mov	[bp+y_offset_border], 22h ; '"'
jmp	short loc_125

loc_F6:
lea	ax, [bp+var_C]
push	ax
mov	ax, 2
push	ax
call	far ptr	88h:17Dh
pop	cx
pop	cx
xor	ax, ax
push	ax
xor	ax, ax
push	ax
mov	ax, 0Fh
push	ax
mov	ax, 2
push	ax
call	far ptr	88h:0Eh
add	sp, 8
mov	[bp+line_height], 0Bh
mov	[bp+y_offset_border], 21h ; '!'

loc_125:
mov	ax, 1
push	ax
call	far ptr	88h:122h
pop	cx
mov	ax, 2Fh	; '/'
push	ax
call	far ptr	88h:0EFh
pop	cx
xor	si, si
jmp	short loc_1B2	; init counters
db  90h	; ê
db  90h	; ê

loc_13F:
push	[bp+unk_ptr]
push	di
mov	ax, [bp+y_offset_final]
add	ax, 22h	; '"'
push	ax		; y
mov	ax, [bp+x_offset_dots]
push	ax		; x
call	far ptr	0F0h:2318h ; display dots
nop
add	sp, 8
push	di
mov	ax, si
mov	dx, 14h
imul	dx
lea	dx, [bp+ptr_power_names_200_byte]
add	ax, dx
push	ax		; string
mov	ax, [bp+y_offset_final]
mov	dx, [bp+y_offset_border]
add	dx, ax
push	dx		; y
mov	ax, [bp+x_offset_strings]
push	ax		; x
call	far ptr	88h:13B9h ; display text
add	sp, 8
inc	si
jmp	short loc_1BB	; loop over item powers
db  90h	; ê

loc_17F:
mov	ax, [bp+row_number]
imul	[bp+line_height]
mov	[bp+y_offset_final], ax	; y offset current row
cmp	[bp+bool_is_2nd_column], 1 ; check which column
jge	short loc_19E	; right	side
mov	[bp+x_offset_dots], 0Bh	; left side
mov	[bp+x_offset_strings], 14h
mov	[bp+bool_is_2nd_column], 1
jmp	short loc_1AF

loc_19E:		; right	side
mov	[bp+x_offset_dots], 54h	; 'T'
mov	[bp+x_offset_strings], 5Ch ; '\'
mov	[bp+bool_is_2nd_column], 0
inc	[bp+row_number]

loc_1AF:
jmp	loc_13F

loc_1B2:		; init counters
mov	[bp+bool_is_2nd_column], 0
mov	[bp+row_number], 0

loc_1BB:		; loop over item powers
cmp	si, [bp+nr_item_powers]
jge	short loc_1C3
jmp	loc_17F

loc_1C3:
pop	di
pop	si
mov	sp, bp
pop	bp
retf
view_item_window endp

seg000 ends


end
